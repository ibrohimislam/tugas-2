// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"bufio"
	"flag"
	"fmt"
	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
	"github.com/ibrohimislam/tugas-2/services/tugas"
	"github.com/ibrohimislam/tugas-2/utils"
	"io"
	"io/ioutil"
	"math"
	"net"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port]:")
	flag.PrintDefaults()
	os.Exit(0)
}

func main() {
	var host string
	var port int
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi

	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.Parse()

	var err error

	portStr := fmt.Sprint(port)
	if strings.Contains(host, ":") {
		host, portStr, err = net.SplitHostPort(host)
		if err != nil {
			fmt.Fprintln(os.Stderr, "error with host:", err)
			os.Exit(1)
		}
	}
	trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
	if err != nil {
		fmt.Fprintln(os.Stderr, "error resolving address:", err)
		os.Exit(1)
	}

	trans = thrift.NewTFramedTransport(trans)

	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()

	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()

	client := tugas.NewFileSvcClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	var command string

	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("> ")

		command, err = reader.ReadString('\n')
		if err == io.EOF {
			break
		}
		command = strings.TrimSpace(command)

		cmd := strings.Split(command, " ")

		switch cmd[0] {
		case "DIR":
			if len(cmd)-1 != 1 {
				fmt.Fprintln(os.Stderr, "DIR requires 1 args")
				break
			}
			path := cmd[1]

			list, err := client.Dir(path)

			if err != nil {
				fmt.Print("File Not Found.\n")
				break
			}

			fmt.Print(".\n", "..\n")

			for _, file := range list {
				fmt.Print(file.Mode)
				fmt.Print(" ")
				fmt.Print(file.ModifiedTime)
				fmt.Print(" ")
				fmt.Print(file.CreatedTime)
				fmt.Print(" ")
				fmt.Print(file.Size)
				fmt.Print("\t")
				fmt.Print(file.Filename)
				fmt.Print("\n")
			}

			break
		case "CREATEDIR":
			if len(cmd)-1 != 2 {
				fmt.Fprintln(os.Stderr, "CREATEDIR requires 2 args")
				break
			}
			argvalue0 := cmd[1]
			value0 := argvalue0
			argvalue1 := cmd[2]
			value1 := argvalue1

			err := client.CreateDir(value0, value1)

			if err == nil {
				fmt.Print("succes.\n")
				break
			}

			fmt.Print(err, "\n")
			break
		case "GETFILE":
			if len(cmd)-1 != 3 {
				fmt.Fprintln(os.Stderr, "GETFILE requires 3 args")
				break
			}
			argvalue0 := cmd[1]
			value0 := argvalue0
			argvalue1 := cmd[2]
			value1 := argvalue1
			argvalue2 := cmd[3]
			value2 := argvalue2

			var content []int8
			var err error
			var file *os.File
			var byteLength int

			content, err = client.GetContent(value0, value1)
			check(err)

			file, err = os.Create(value2)
			check(err)
			defer file.Close()

			byteLength, err = file.Write(i2b(content))
			check(err)

			fmt.Printf("%s (%d bytes)\n", value2, byteLength)
			break
		case "PUTFILE":
			if len(cmd)-1 != 3 {
				fmt.Fprintln(os.Stderr, "PUTFILE requires 3 args")
				break
			}
			argvalue0 := cmd[1]
			value0 := argvalue0
			argvalue1 := cmd[2]
			value1 := argvalue1
			argvalue2 := cmd[3]
			value2 := argvalue2

			var content []byte
			var contentInt8 []int8
			var err error
			var byteLength int32
			var handle string

			content, err = ioutil.ReadFile(value2)
			check(err)
			contentInt8 = b2i(content)

			hash := utils.Sha256file(value2)
			handle, err = client.PutContentOpen(value0, value1, hash)
			check(err)

			for len(contentInt8) > 512 {
				_, err = client.PutContentPartial(handle, contentInt8[:512])
				check(err)

				contentInt8 = contentInt8[512:]
			}

			_, err = client.PutContentPartial(handle, contentInt8)
			check(err)

			byteLength, err = client.PutContentClose(handle)
			check(err)

			fmt.Printf("[%s] transfered %d bytes\n", handle, byteLength)
			break
		case "":
			fmt.Printf("%s?\n", command)
			break
		default:
			fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
		}
	}

}

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func i2b(bs []int8) []byte {
	b := make([]byte, len(bs))
	for i, v := range bs {
		b[i] = byte(v)
	}
	return b
}

func b2i(bs []byte) []int8 {
	b := make([]int8, len(bs))
	for i, v := range bs {
		b[i] = int8(v)
	}
	return b
}
