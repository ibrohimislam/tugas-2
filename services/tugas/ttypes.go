// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tugas

import (
	"fmt"
	"git-wip-us.apache.org/repos/asf/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type File struct {
	Filename     string `thrift:"filename,1,required"`
	Size         string `thrift:"size,2,required"`
	Mode         string `thrift:"mode,3,required"`
	ModifiedTime string `thrift:"modifiedTime,4,required"`
	CreatedTime  string `thrift:"createdTime,5,required"`
	IsDir        bool   `thrift:"isDir,6,required"`
}

func NewFile() *File {
	return &File{}
}

func (p *File) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *File) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Filename = v
	}
	return nil
}

func (p *File) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *File) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Mode = v
	}
	return nil
}

func (p *File) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ModifiedTime = v
	}
	return nil
}

func (p *File) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *File) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.IsDir = v
	}
	return nil
}

func (p *File) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("File"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *File) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filename", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:filename: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Filename)); err != nil {
		return fmt.Errorf("%T.filename (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:filename: %s", p, err)
	}
	return err
}

func (p *File) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("size", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:size: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Size)); err != nil {
		return fmt.Errorf("%T.size (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:size: %s", p, err)
	}
	return err
}

func (p *File) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mode", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mode: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Mode)); err != nil {
		return fmt.Errorf("%T.mode (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mode: %s", p, err)
	}
	return err
}

func (p *File) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("modifiedTime", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:modifiedTime: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ModifiedTime)); err != nil {
		return fmt.Errorf("%T.modifiedTime (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:modifiedTime: %s", p, err)
	}
	return err
}

func (p *File) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createdTime", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:createdTime: %s", p, err)
	}
	if err := oprot.WriteString(string(p.CreatedTime)); err != nil {
		return fmt.Errorf("%T.createdTime (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:createdTime: %s", p, err)
	}
	return err
}

func (p *File) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isDir", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:isDir: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsDir)); err != nil {
		return fmt.Errorf("%T.isDir (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:isDir: %s", p, err)
	}
	return err
}

func (p *File) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("File(%+v)", *p)
}
